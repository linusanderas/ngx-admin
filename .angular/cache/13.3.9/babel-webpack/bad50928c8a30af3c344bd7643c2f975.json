{"ast":null,"code":"import _classCallCheck from \"C:\\\\Utveckling\\\\Devoted-admin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Utveckling\\\\Devoted-admin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DataService } from './data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastController } from '@ionic/angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@ionic/angular\";\nexport var ApiService = /*#__PURE__*/(function () {\n  var ApiService = /*#__PURE__*/function () {\n    function ApiService(http, data, translate, toastController) {\n      _classCallCheck(this, ApiService);\n\n      this.http = http;\n      this.data = data;\n      this.translate = translate;\n      this.toastController = toastController;\n      this[\"url_base\"] = 'https://admin.devotedapp.com/api/';\n    }\n\n    _createClass(ApiService, [{\n      key: \"login\",\n      value: function login(user) {\n        return this.http.post(this.url_base + \"user/login\", user).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"register\",\n      value: function register(user) {\n        return this.http.post(this.url_base + \"user/register\", user).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"fbLogin\",\n      value: function fbLogin(postObject) {\n        return this.http.post(this.url_base + \"user/fblogin\", postObject).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getUsers\",\n      value: function getUsers() {\n        return this.http.get(this.url_base + \"user\").pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser(id) {\n        var _this = this;\n\n        var url = this.url_base + \"user/\" + id;\n\n        if (this.data.user.id && this.data.user.id != id) {\n          url += \"?user_id=\" + this.data.user.id;\n        }\n\n        return this.http.get(url).pipe(map(function (data) {\n          _this.data.unread = data.unread;\n\n          if (data.lang != _this.data.lang) {\n            _this.data.changing_lang(data.lang);\n          }\n\n          return data;\n        }));\n      }\n    }, {\n      key: \"setUser\",\n      value: function setUser(user) {\n        if (user.id == this.data.user.id) {\n          user.lang = this.data.lang;\n        }\n\n        return this.http.post(this.url_base + \"user\", user).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"delUser\",\n      value: function delUser(id) {\n        return this.http.delete(this.url_base + \"user/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"sendInvite\",\n      value: function sendInvite(user) {\n        user.lang = this.data.lang;\n        return this.http.post(this.url_base + \"user/\" + this.data.user.id + \"/invite\", user).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"sendFriendRequest\",\n      value: function sendFriendRequest(id) {\n        return this.http.get(this.url_base + \"user/friendrequest/\" + this.data.user.id + \"?friend_id=\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"approveFriendRequest\",\n      value: function approveFriendRequest(id) {\n        return this.http.get(this.url_base + \"user/approvefriendrequest/\" + this.data.user.id + \"?friend_id=\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"removefriend\",\n      value: function removefriend(id) {\n        return this.http.get(this.url_base + \"user/removefriend/\" + this.data.user.id + \"?friend_id=\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"clearNotifications\",\n      value: function clearNotifications(id) {\n        return this.http.get(this.url_base + \"user/clearnotifications/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"findPrayers\",\n      value: function findPrayers() {\n        return this.http.get(this.url_base + \"prayer?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getPrayer\",\n      value: function getPrayer(id) {\n        return this.http.get(this.url_base + \"prayer/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setPrayer\",\n      value: function setPrayer(prayer) {\n        return this.http.post(this.url_base + \"prayer\", prayer).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setPrayerLog\",\n      value: function setPrayerLog(prayerlog) {\n        return this.http.post(this.url_base + \"prayerlog\", prayerlog).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"addPrayer\",\n      value: function addPrayer(id) {\n        var user_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.data.user.id;\n        return this.http.get(this.url_base + \"prayer/\" + id + \"/add?user_id=\" + user_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"removePrayer\",\n      value: function removePrayer(id) {\n        return this.http.get(this.url_base + \"prayer/\" + id + \"/remove?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"delPrayer\",\n      value: function delPrayer(id) {\n        return this.http.delete(this.url_base + \"prayer/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getArchivedPrayers\",\n      value: function getArchivedPrayers() {\n        return this.http.get(this.url_base + \"prayer?alt=archived&user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"findGroups\",\n      value: function findGroups() {\n        var user_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.data.user.id;\n        return this.http.get(this.url_base + \"group?user_id=\" + user_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getGroups\",\n      value: function getGroups() {\n        return this.http.get(this.url_base + \"group?all=true\").pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getGroup\",\n      value: function getGroup(id) {\n        return this.http.get(this.url_base + \"group/\" + id + \"?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getSingleGroup\",\n      value: function getSingleGroup(id) {\n        return this.http.get(this.url_base + \"group/\" + id + \"?user_id=0\").pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setGroup\",\n      value: function setGroup(group) {\n        return this.http.post(this.url_base + \"group\", group).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"delGroup\",\n      value: function delGroup(id) {\n        return this.http.delete(this.url_base + \"group/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setGroupUserType\",\n      value: function setGroupUserType(id, user_id, type) {\n        return this.http.get(this.url_base + \"group/\" + id + \"/setusertype?user_id=\" + user_id + \"&type=\" + type).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"delGroupUser\",\n      value: function delGroupUser(id, user_id) {\n        return this.http.get(this.url_base + \"group/\" + id + \"/remove?user_id=\" + user_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"sendGroupRequest\",\n      value: function sendGroupRequest(id) {\n        return this.http.get(this.url_base + \"group/\" + id + \"/addrequest?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"addEvent\",\n      value: function addEvent(id) {\n        return this.http.get(this.url_base + \"event/\" + id + \"/add?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"delEvent\",\n      value: function delEvent(id) {\n        return this.http.get(this.url_base + \"event/\" + id + \"/del?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"joinEvent\",\n      value: function joinEvent(id) {\n        return this.http.get(this.url_base + \"event/\" + id + \"/join?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"leaveEvent\",\n      value: function leaveEvent(id) {\n        return this.http.get(this.url_base + \"event/\" + id + \"/leave?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getEvent\",\n      value: function getEvent(id) {\n        return this.http.get(this.url_base + \"event/\" + id + \"?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setEvent\",\n      value: function setEvent(event) {\n        return this.http.post(this.url_base + \"event\", event).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"removeEvent\",\n      value: function removeEvent(id) {\n        return this.http.delete(this.url_base + \"event/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"findEvents\",\n      value: function findEvents() {\n        return this.http.get(this.url_base + \"event?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getChallenges\",\n      value: function getChallenges(status) {\n        return this.http.get(this.url_base + \"challenge?status=\" + status + \"&user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setChallenge\",\n      value: function setChallenge(challenge) {\n        return this.http.post(this.url_base + \"challenge?user_id=\" + this.data.user.id, challenge).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getChallenge\",\n      value: function getChallenge(id) {\n        return this.http.get(this.url_base + \"challenge/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getProgress\",\n      value: function getProgress(id) {\n        return this.http.get(this.url_base + \"user/\" + id + \"/progress\").pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getDevotion\",\n      value: function getDevotion(id) {\n        return this.http.get(this.url_base + \"devotion/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"createDevotion\",\n      value: function createDevotion() {\n        var postObject = {\n          user_id: this.data.user.id\n        };\n        return this.http.post(this.url_base + \"devotion\", postObject).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getDevotionGoals\",\n      value: function getDevotionGoals() {\n        return this.http.get(this.url_base + 'user/' + this.data.user.id + '/alldevotiongoals').pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setDevotionGoals\",\n      value: function setDevotionGoals(save_str) {\n        var obj = {\n          save_str: save_str\n        };\n        return this.http.post(this.url_base + 'user/' + this.data.user.id + '/setdevotiongoals', obj).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setChallengesStatus\",\n      value: function setChallengesStatus(id, status) {\n        return this.http.get(this.url_base + \"challenge/\" + id + \"/change?status=\" + status + \"&user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getChat\",\n      value: function getChat(id) {\n        return this.http.get(this.url_base + \"chat/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getFeed\",\n      value: function getFeed(id) {\n        return this.http.get(this.url_base + \"feed/\" + id + \"?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setFeed\",\n      value: function setFeed(feed) {\n        return this.http.post(this.url_base + \"feed\", feed).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"removeFeed\",\n      value: function removeFeed(id) {\n        return this.http.delete(this.url_base + \"feed/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplan\",\n      value: function setReadplan(readplan) {\n        return this.http.post(this.url_base + \"readplan\", readplan).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getReadplan\",\n      value: function getReadplan(id) {\n        return this.http.get(this.url_base + \"readplan/\" + id + \"?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"findReadplans\",\n      value: function findReadplans() {\n        var user_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.data.user.id;\n        return this.http.get(this.url_base + \"readplan?user_id=\" + user_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplanActivate\",\n      value: function setReadplanActivate(id) {\n        return this.http.get(this.url_base + \"readplan/\" + id + \"/activate?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplanDeactivate\",\n      value: function setReadplanDeactivate(id) {\n        return this.http.get(this.url_base + \"readplan/\" + id + \"/deactivate?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplanActivateGroup\",\n      value: function setReadplanActivateGroup(id, group_id) {\n        return this.http.get(this.url_base + \"readplan/\" + id + \"/activategroup?group_id=\" + group_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplanDeactivateGroup\",\n      value: function setReadplanDeactivateGroup(id, group_id) {\n        return this.http.get(this.url_base + \"readplan/\" + id + \"/deactivategroup?group_id=\" + group_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setReadplanEntryStatus\",\n      value: function setReadplanEntryStatus(id, status) {\n        return this.http.get(this.url_base + \"readplanentry/\" + id + \"/change?status=\" + status + \"&user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"findEngagements\",\n      value: function findEngagements() {\n        return this.http.get(this.url_base + \"engagement?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getEngagement\",\n      value: function getEngagement(id) {\n        return this.http.get(this.url_base + \"engagement/\" + id + \"?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setEngagementActivate\",\n      value: function setEngagementActivate(id) {\n        return this.http.get(this.url_base + \"engagement/\" + id + \"/activate?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setEngagementDeactivate\",\n      value: function setEngagementDeactivate(id) {\n        return this.http.get(this.url_base + \"engagement/\" + id + \"/deactivate?user_id=\" + this.data.user.id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setEngagement\",\n      value: function setEngagement(engagement) {\n        return this.http.post(this.url_base + \"engagement\", engagement).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"removeEngagement\",\n      value: function removeEngagement(id) {\n        return this.http.delete(this.url_base + \"engagement/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setMessage\",\n      value: function setMessage(msg) {\n        return this.http.post(this.url_base + \"message\", msg).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"setNote\",\n      value: function setNote(note) {\n        return this.http.post(this.url_base + \"note\", note).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getNote\",\n      value: function getNote(id) {\n        return this.http.get(this.url_base + \"note/\" + id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getAllNotes\",\n      value: function getAllNotes(user_id) {\n        return this.http.get(this.url_base + \"note?show=all&user_id=\" + user_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getBibleText\",\n      value: function getBibleText(verse, lang) {\n        return this.http.get(this.url_base + \"bible?verse=\" + verse + \"&lang=\" + lang).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"getNotes\",\n      value: function getNotes(user_id, origin, origin_id) {\n        return this.http.get(this.url_base + \"note?user_id=\" + user_id + \"&origin=\" + origin + \"&origin_id=\" + origin_id).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"requestPassword\",\n      value: function requestPassword(email) {\n        var postObject = {\n          email: email\n        };\n        return this.http.post(this.url_base + \"user/request\", postObject).pipe(map(function (data) {\n          return data;\n        }));\n      }\n    }, {\n      key: \"uploadImg\",\n      value: function uploadImg(base) {\n        var obj = {\n          src: base\n        };\n        return this.http.post(this.url_base + \"upload\", obj).pipe(map(function (data) {\n          return data.path;\n        }));\n      }\n    }, {\n      key: \"date_fix\",\n      value: function date_fix(date) {\n        return date.toISOString().slice(0, 19).replace('T', ' ');\n      }\n    }, {\n      key: \"showSuccess\",\n      value: function showSuccess(message) {\n        var _this2 = this;\n\n        this.translate.get(message).subscribe(function (translated_string) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var toast;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    toast = this.toastController.create({\n                      message: translated_string,\n                      duration: 2000\n                    });\n                    _context.next = 3;\n                    return toast;\n\n                  case 3:\n                    _context.sent.present();\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n    }, {\n      key: \"showError\",\n      value: function showError(message) {\n        var _this3 = this;\n\n        this.translate.get(message).subscribe(function (translated_string) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            var toast;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    toast = this.toastController.create({\n                      message: translated_string,\n                      duration: 2000\n                    });\n                    _context2.next = 3;\n                    return toast;\n\n                  case 3:\n                    _context2.sent.present();\n\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2, this);\n          }));\n        });\n      }\n    }]);\n\n    return ApiService;\n  }();\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataService), i0.ɵɵinject(i3.TranslateService), i0.ɵɵinject(i4.ToastController));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}